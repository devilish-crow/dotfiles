#!/bin/ash
echo "Please enter your username:"
read USER
while [ -z "$USER" ]; do
    echo "Username cannot be empty. Please enter a valid username:"
    read USER
done

echo "Installing core packages for system setup..."
doas apk add linux-firmware mesa-dri-gallium util-linux-login iwd openresolv seatd i3status xwayland sway swaybg waybar grim slurp clipman pipewire pipewire-pulse pipewire-echo-cancel wireplumber flatpak bubblewrap man-db || { echo "Installation failed! Exiting."; exit 1; }
doas apk add font-jetbrains-mono-nerd htop pamixer foot cargo firefox || echo "Failed to install extra tools!"

echo "Do you need a code editor? (yes/no)"
read neovim
if [ "$neovim" = "yes" ]; then 
 doas apk add neovim openssl-dev openssl-libs-static zlib-dev zlib-static build-base
fi

echo "Do you need Bluetooth management? (yes/no)"
read bluetooth_choice
if [ "$bluetooth_choice" = "yes" ]; then
    echo "Setting up Bluetooth management..."
    doas rfkill unblock bluetooth 2> /dev/null
    doas apk add bluez bluez-openrc pipewire-spa-bluez wireplumber-bluez playerctl || { echo "Failed to install Bluetooth tools!"; exit 1; }
    doas rc-update add bluetooth
    cargo install bluetui || echo "Failed to install bluetui!"
fi

echo "Do you want to enable screen sharing (Desktop Portals)? (yes/no)"
read screen_sharing_choice
if [ "$screen_sharing_choice" = "yes" ]; then
    echo "Setting up Desktop Portals for screen sharing..."
    doas apk add xdg-desktop-portal xdg-desktop-portal-wlr || { echo "Failed to install desktop portals!"; exit 1; }
fi

echo "Do you want to set up kiosk mode? (yes/no)"
read kiosk_choice
if [ "$kiosk_choice" = "yes" ]; then
    echo "Setting up kiosk mode dependencies without greeter..."
    doas apk add cage cagebreak || { echo "Failed to install kiosk tools!"; exit 1; }
else
    echo "Setting up greetd login screen..."
    doas apk add greetd greetd-tuigreet || { echo "Failed to install greeter!"; exit 1; }
fi

echo "Setting up user and necessary groups..."
doas adduser -D $USER || { echo "Failed to create user!"; exit 1; }
doas addgroup $USER wheel
doas addgroup $USER audio
doas addgroup $USER video

echo "Cleaning up old Alpine update script..."
doas rm /etc/init.d/alpine-update 2> /dev/null

echo "Writing custom Alpine system update service..."
cat <<EOF | doas tee /etc/init.d/alpine-update > /dev/null
#!/sbin/openrc-run
description="Alpine Linux system updater"

depend() {
  need localmount
  need networking
  need bootmisc
  need iwd
}

start() {
  ebegin "Updating packages to latest version"
  (apk update && apk upgrade) > /dev/null &
  eend \$?
}
EOF

doas chmod +x /etc/init.d/alpine-update
doas rc-update add alpine-update default
doas rc-update add seatd default

echo "Cleaning up old networking configuration..."
doas rm /etc/init.d/wpa_* 2> /dev/null
doas rm /etc/network/interfaces 2> /dev/null

echo "Setting up minimal network interfaces..."
cat <<EOF | doas tee /etc/network/interfaces > /dev/null
auto lo
iface lo inet loopback
EOF

echo "Configuring iwd wireless settings..."
doas rm /etc/iwd/main.conf 2> /dev/null
cat <<EOF | doas tee /etc/iwd/main.conf > /dev/null
[General]
EnableNetworkConfiguration=True

[Network]
NameResolvingService=resolvconf
EOF

doas rc-update add iwd boot
cargo install impala || { echo "Failed to install impala!"; exit 1; }

echo "Setting up user profile..."
doas rm ~/.profile 2> /dev/null
doas cp .profile ~/

if [ "$kiosk_choice" != "yes" ]; then
    echo "Setting up greetd login screen..."
    doas rm /etc/greetd/config.toml 2> /dev/null
    doas cp sway /usr/bin/sway-run

    echo "Creating greetd config..."
    doas mkdir -p /etc/greetd 2> /dev/null
    cat <<EOF | doas tee /etc/greetd/config.toml > /dev/null
[terminal]
vt = 7

[default_session]
command = "tuigreet --cmd sway-run --time"
user = "$USER"
EOF
    rc-update add greetd default
fi

echo "Installation complete. You now have a desktop! :yeppie:"
